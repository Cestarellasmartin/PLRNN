% Script to determine if you have "spike holes" (lack of spike dection) in 
% the sorting process by Kilosort.

% To test the output of Kilosort you will need the matlab package and the
% functions from Kilosort.

% The files that you will need to test are:
% (This files are generated by kilosort - matlab)
% * params.py
% * spike_times.npy
% * spike_templates.npy
% * spike_clusters.npy
% * amplitudes.npy
% * pc_features.npy
% * pc_feature_ind.npy
% * rez.mat

% Method:
% The method used to identify if we have "spike holes" is published in:
% https://github.com/MouseLand/Kilosort/issues/594

%% Loading Files
clear all
close all
clc

% Select the directory where are the data to preprocess
Path = uigetdir;
cd(Path)

sp = Extracting_Cluster_Data(Path);                                         % Function from Kilosort package
spike_time = sort(sp.st);                                                  % Selection of good clusters ("neurons")
info_file=dir('rez*');
info_kilo = load(info_file.name);

batch_time=info_kilo.rez.ops.NTbuff/info_kilo.rez.ops.fs;                   % Window of time used in Kilosort 

%% Computing Spike holes

a = diff(spike_time(find(diff(spike_time)>0.0065))) / batch_time;            

% Figure to show if we have "spike hole". We should have peaks in integers (1,2,3...) 
figure()
histogram(a, 'Numbins',1000,'BinLimits',[0, 10])
xlabel("pykilosort batch")
ylabel("coun of spike times void > 7 ms")

% Final result
if sum(mod(a,batch_time)==0) > 0
    disp("I am sorry you have spike holes")
else
    disp("Everything is Okey, you can continue analyzing")
end
